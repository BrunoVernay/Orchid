// Configure build, dependencies, output jar, and Java compatibility
//------------------------------------------------------------------------------
apply from: 'gradle/dependencies.gradle'

buildscript {
    def kotlin_version = '1.2.31'
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath "org.ajoberstar:gradle-git:1.7.2"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

apply plugin: 'base'
apply plugin: 'idea'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: "com.dorongold.task-tree"
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'jacoco'

group   = 'io.github.javaeden.orchid'

// Define the 'types' of projects Orchid is working with
//      coreProject - the main core module required by every other Orchid extension
//      themeProjects - Orchid themes, required to actually use Orchid by all other projects
//      languageExtensionProjects - Additional functionality to add to Orchid, specifically those extensions which add
//              additional compilers, parsers, or augment page content
//      pluginProjects - Additional functionality to add to Orchid, none of which are required by any project (includes
//              all languageExtensionProjects)
//      bundleProjects - Groups of plugins and themes intended to make it easy to get set up with a fully-configured
//              Orchid environment with a single dependency artifact.
//      mainProjects - The aggregate of core, theme, and plugin groups. Includes all packages which contain sources.
//              Excludes 'empty projects' like ':themes' and ':plugins', as well as the root project and 'buildSrc'
ext.coreProject    = subprojects.findAll { return (it.name == "OrchidCore") }
ext.themeProjects  = subprojects.findAll { return (it.path.startsWith(":themes"))  && (it.name != "themes") }
ext.languageExtensionProjects = subprojects.findAll { return (it.path.startsWith(":languageExtensions")) && (it.name != "languageExtensions") }
ext.pluginProjects = ext.languageExtensionProjects + subprojects.findAll { return (it.path.startsWith(":plugins")) && (it.name != "plugins")}
ext.bundleProjects = subprojects.findAll { return (it.path.startsWith(":bundles")) && (it.name != "bundles") }
ext.mainProjects   = coreProject + themeProjects + pluginProjects

allprojects {
    repositories {
        jcenter()
        maven { url 'https://dl.bintray.com/javaeden/Eden/' }
        maven { url 'https://jitpack.io' }
        maven { url "http://dl.bintray.com/typesafe/maven-releases" }
    }
}

// Deploy
//----------------------------------------------------------------------------------------------------------------------

tag {
    message { "Bump version to ${version}" }
}

task getReleaseName {
    doLast {
        println project.version.toString()
    }
}

task getReleaseNotes {
    doLast {
        def versionFilename = project.version.toString().replaceAll("\\.", "_") + ".md"
        def fullVersionFilename = "$projectDir/OrchidCore/src/orchid/resources/changelog/$versionFilename"
        def versionFile = file(fullVersionFilename)

        if(versionFile.exists()) {
            println versionFile.text.split("---").last().trim()
        }
        else {
            println "No release notes"
        }
    }
}

task copyFilesToRoot {
    doLast {
    }
}

task prepareDocumentation {
    dependsOn copyFilesToRoot
}

task archiveDocumentation(type: Zip) {
    mustRunAfter prepareDocumentation
    from "${rootProject.buildDir}/orchid/docs/${project.version}"

    def versionFilename = project.version.toString().replaceAll("\\.", "_") + ".md"
    def fullVersionFilename = "$projectDir/OrchidCore/src/orchid/resources/changelog/$versionFilename"
    def versionFile = file(fullVersionFilename)
    if(versionFile.exists()) {
        from versionFile
    }

    include '**/*'
    archiveName "docs-${project.version}.zip"
    destinationDir(file("$buildDir/orchid/archives"))
}

task deploy {
    dependsOn prepareDocumentation, archiveDocumentation
    doLast { }
}

// Configure
//----------------------------------------------------------------------------------------------------------------------

configure(ext.mainProjects)   { apply from: "$rootDir/gradle/mainProjects.gradle" }
configure(ext.themeProjects)  { apply from: "$rootDir/gradle/themeProjects.gradle" }
configure(ext.pluginProjects) { apply from: "$rootDir/gradle/pluginProjects.gradle" }
configure(ext.bundleProjects) { apply from: "$rootDir/gradle/bundleProjects.gradle" }

// Code Coverage Reports
//----------------------------------------------------------------------------------------------------------------------
task codeCoverageReport(type: JacocoReport) {
    dependsOn {
        rootProject.ext.mainProjects*.test
    }

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    rootProject.ext.mainProjects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

configurations { codacy }
dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:4.0.0'
}
task sendCoverageToCodacy(type: JavaExec) {
    dependsOn codeCoverageReport

    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/report.xml"
    ]
}
