
// Normal module configuration
//----------------------------------------------------------------------------------------------------------------------

apply plugin: 'java-library'

dependencies {

    // Dynamic Component Registration
    api 'com.google.inject:guice:4.2.2'
    api 'io.github.classgraph:classgraph:4.4.12'

    // core utilities
    api "com.eden:Common:${JavaEden.Common}"
    api "com.eden:Clog4j:${JavaEden.Clog}"
    api "com.eden:krow:${JavaEden.Krow}"
    api "com.squareup.okhttp3:okhttp:3.12.0"
    api "commons-io:commons-io:2.6"
    api 'org.apache.commons:commons-lang3:3.8.1'
    api 'net.coobird:thumbnailator:0.4.8'
    compileOnly "org.projectlombok:lombok:1.18.4"
    annotationProcessor "org.projectlombok:lombok:1.18.4"
    testCompileOnly "org.projectlombok:lombok:1.18.4"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.4"

    // validation
    api "javax.validation:validation-api:2.0.1.Final"
    implementation "org.hibernate.validator:hibernate-validator:6.0.13.Final"
    api "org.glassfish:javax.el:3.0.1-b10"

    // Included parsers: JSON, YAML, TOML, CSV, Pebble, Markdown, Sass
    api 'org.json:json:20180130'
    implementation 'org.yaml:snakeyaml:1.23'
    implementation 'com.moandjiezana.toml:toml4j:0.7.2'
    implementation 'io.pebbletemplates:pebble:3.0.6'
    implementation 'io.bit3:jsass:5.7.3'
    implementation 'com.univocity:univocity-parsers:2.7.6'

    // Flexmark extensions
    api "com.vladsch.flexmark:flexmark:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-aside:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-attributes:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-enumerated-reference:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-gfm-tables:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-gfm-tasklist:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-toc:$flexmarkVersion"

    // server
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
    implementation 'org.nanohttpd:nanohttpd-websocket:2.3.1'

    // generate own documentation with Orchid
    orchidCompile mainProjects
}

// Make sure Core is compiled before plugins, but javadoc run after plugins
//----------------------------------------------------------------------------------------------------------------------

static boolean otherProjectsTask(Task task, String taskName) {
    return !task.path.startsWith(':OrchidCore') && task.path.endsWith(":${taskName}")
}

project.parent.subprojects.each { subproject ->
    project.tasks.javadoc.dependsOn subproject.tasks.matching { task -> otherProjectsTask(task, 'jar') }
    project.tasks.orchidRun.dependsOn subproject.tasks.matching { task -> otherProjectsTask(task, 'jar') }
    project.tasks.javadoc.shouldRunAfter subproject.tasks.matching { task -> otherProjectsTask(task, 'javadoc') }
}

// Generate a Class containing the current build version, so it can be injected into OrchidSite
//----------------------------------------------------------------------------------------------------------------------

// TODO: Change this to have the runtime read from a .properties file rather than reflectively find this class
task generateSources {
    def outputDir = file("$buildDir/generated-src")
    outputs.dir outputDir
    doFirst {
        def srcFile = new File(outputDir, "com/eden/orchid/OrchidVersion.java")
        srcFile.parentFile.mkdirs()
        srcFile.write("""
package com.eden.orchid;
public class OrchidVersion {
   public static String getVersion() { return "$project.version"; }
}
""")
    }
}
compileJava.dependsOn generateSources
compileJava.source generateSources.outputs.files, sourceSets.main.java
